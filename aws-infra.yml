
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation projet 10
Resources:
  ONEVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: 'ONEVPC'

  SousReseauA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2a
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt ONEVPC.CidrBlock, 3, 8 ]]
      Tags:
        - Key: Name
          Value: 'ONEVPC-AZ-a'
      VpcId: !Ref ONEVPC

  SousReseauB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2b
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt ONEVPC.CidrBlock, 3, 8 ]]
      Tags:
        - Key: Name
          Value: 'ONEVPC-AZ-b'
      VpcId: !Ref ONEVPC

  SousReseauC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2c
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt ONEVPC.CidrBlock, 3, 8 ]]
      Tags:
        - Key: Name
          Value: 'ONEVPC-AZ-c'
      VpcId: !Ref ONEVPC
      
  IPpublic:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  
  AssocieIPpublic:
    DependsOn: LoadBalancer
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt IPpublic.AllocationId
      InstanceId: !Ref LoadBalancer
      
  EC2SecurityGroup: 
    Type:  AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  EC2 security group 
      SecurityGroupEgress: 
        - IpProtocol:  -1
          CidrIp:  0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref ONEVPC
      
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      ImageId: !Ref AmiIdentifier
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo systemctl start httpd
          
  SRAScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfig
      AvailabilityZones: !Ref SousReseauA
      VPCZoneIdentifier: !Ref SousReseauA
      MinSize: 1
      TargetGroupARNs:
        - !Ref SRATargetGroup

  SRATargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ONEVPC
  
  SRBScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfig
      AvailabilityZones: !Ref SousReseauB
      VPCZoneIdentifier: !Ref SousReseauB
      MinSize: 1
      TargetGroupARNs:
        - !Ref SRBTargetGroup

  SRBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ONEVPC
      
  LoadBalancer: 
    Type:AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme:internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:  
        - !Ref SousReseauA
        - !Ref SousReseauB
      
  LoadBalancerSecurityGroup:
    Type:AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 security group 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref ONEVPC
      
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: 
            - !Ref SRATargetGroup
            - !Ref SRBTargetGroup

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
      VpcId: !Ref ONEVPC
      
  DBSousreseauGroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Groupe data sous reseau 
      DBSubnetGroupName: DataGroup
      SubnetIds: 
        - !Ref SousReseauA
        - !Ref SousReseauB
    
      
  DatabaseWP:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.micro
      DBName: datawp
      Engine: mariadb
      MasterUserPassword: Marinash-66
      MasterUsername: administrateur
      MultiAZ: True
      DBSubnetGroupName: !Ref DBSousreseauGroup
      VPCSecurityGroups:
      - !GetAtt DBEC2SecurityGroup.GroupId
    
  LeBucket:
    Type: AWS::S3::Bucket
